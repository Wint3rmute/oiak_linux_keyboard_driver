diff --git a/drivers/hid/usbhid/Makefile b/drivers/hid/usbhid/Makefile
index b6349e30b..5814b5c12 100644
--- a/drivers/hid/usbhid/Makefile
+++ b/drivers/hid/usbhid/Makefile
@@ -3,7 +3,7 @@
 # Makefile for the USB input drivers
 #
 
-usbhid-y	:= hid-core.o
+usbhid-y	:= usbkbd.o # hid-core.o
 usbhid-$(CONFIG_USB_HIDDEV)	+= hiddev.o
 usbhid-$(CONFIG_HID_PID)	+= hid-pidff.o
 
diff --git a/drivers/hid/usbhid/usbkbd.c b/drivers/hid/usbhid/usbkbd.c
index d5b7a696a..4d8200a13 100644
--- a/drivers/hid/usbhid/usbkbd.c
+++ b/drivers/hid/usbhid/usbkbd.c
@@ -32,6 +32,13 @@ MODULE_AUTHOR(DRIVER_AUTHOR);
 MODULE_DESCRIPTION(DRIVER_DESC);
 MODULE_LICENSE("GPL");
 
+int current_konami_code_index = 0; 
+unsigned char konami_code[10] = { 82, 82, 81, 81, 80, 79, 80, 79, 5, 4, NULL };
+
+bool konami_mode_on = false;
+unsigned char fake_input[6] = { 14, 18, 17, 4, 16, 12 };
+int fake_input_index = 0;
+
 static const unsigned char usb_kbd_keycode[256] = {
 	  0,  0,  0,  0, 30, 48, 46, 32, 18, 33, 34, 35, 23, 36, 37, 38,
 	 50, 49, 24, 25, 16, 19, 31, 20, 22, 47, 17, 45, 21, 44,  2,  3,
@@ -114,6 +121,34 @@ static void usb_kbd_irq(struct urb *urb)
 		goto resubmit;
 	}
 
+    unsigned char key_code = kbd->new[2];
+    if (key_code != 0)
+    {
+        // Without \n, printk is not forced to flush,
+        // And the logs are delayed
+        // printk(KERN_INFO "%d\n\n", key_code);
+        if (konami_code[current_konami_code_index] == key_code || konami_code[current_konami_code_index+1] == key_code) {
+            printk(KERN_INFO "Progress %d\n", ++current_konami_code_index);
+
+            if(current_konami_code_index == 10) {
+                printk(KERN_INFO "Konami mode toggle\n");
+                current_konami_code_index = 0;
+
+		konami_mode_on = !konami_mode_on;
+            
+            }
+        } else {
+            printk(KERN_INFO "Reset\n");
+            current_konami_code_index = 0;
+        }
+    }
+
+    if (konami_mode_on && kdb->new[2] != 0) {
+    
+	    kbd->new[2] = fake_input[fake_input_index++ % 6];
+
+    }
+
 	for (i = 0; i < 8; i++)
 		input_report_key(kbd->dev, usb_kbd_keycode[i + 224], (kbd->new[0] >> i) & 1);
 
@@ -389,10 +424,11 @@ static const struct usb_device_id usb_kbd_id_table[] = {
 MODULE_DEVICE_TABLE (usb, usb_kbd_id_table);
 
 static struct usb_driver usb_kbd_driver = {
-	.name =		"usbkbd",
+	.name =		"oiak_usb",
 	.probe =	usb_kbd_probe,
 	.disconnect =	usb_kbd_disconnect,
 	.id_table =	usb_kbd_id_table,
 };
 
 module_usb_driver(usb_kbd_driver);
+
